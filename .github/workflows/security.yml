name: Security Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified

  content-filtering:
    name: Content Policy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Check for forbidden terms
        run: |
          # AUDITOR REQUIRED: Block files with sensitive terms
          if grep -r -i "AUDIT.*\.md\|POC.*\.md\|EXPLOIT.*\.md\|TOCTOU.*\.md" . --include="*.md" --include="*.sol"; then
            echo "❌ FORBIDDEN: Files with sensitive terms found"
            exit 1
          fi
          
          # Block private key patterns in files
          if grep -r "PRIVATE_KEY.*=" . --include="*.sol" --include="*.js" --include="*.ts" --exclude-dir=node_modules; then
            echo "❌ FORBIDDEN: Private key assignments found"
            exit 1
          fi
          
          # Check for attack terminology in test files
          if grep -r -i "step.*step\|attack.*vector\|exploit.*this\|vulnerability.*here" test/ --include="*.sol"; then
            echo "❌ FORBIDDEN: Attack methodology descriptions found"
            exit 1
          fi
          
          echo "✅ Content policy check passed"

  test-security:
    name: Test Security Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        
      - name: Run tests
        run: forge test --summary
        
      - name: Verify test naming
        run: |
          # Check for sanitized test names
          if grep -r "function test.*TOCTOU\|function test.*Attack\|function test.*Exploit" test/; then
            echo "❌ FORBIDDEN: Unsanitized test names found"
            exit 1
          fi
          
          echo "✅ Test naming policy verified"

  slither-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Slither
        run: pip3 install slither-analyzer
        
      - name: Run Slither
        run: |
          slither . --exclude-informational > slither-report.txt 2>&1 || true
          
          # Check for High/Critical issues
          if grep -i "HIGH\|CRITICAL" slither-report.txt; then
            echo "❌ SECURITY: High/Critical issues found"
            cat slither-report.txt
            exit 1
          fi
          
          echo "✅ Slither analysis passed"
          
      - name: Archive Slither Report
        uses: actions/upload-artifact@v3
        with:
          name: slither-report
          path: slither-report.txt
